{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkConstructorSuccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkSenderAndValue",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkSuccess2",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkaddContractorSuccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"beforeAll()": {
					"notice": "'beforeAll' runs before all other tests More special functions are: 'beforeEach', 'beforeAll', 'afterEach' & 'afterAll'"
				},
				"checkConstructorSuccess()": {
					"notice": "Testing newBuilding constructor, and a few public functions."
				},
				"checkSenderAndValue()": {
					"notice": "Custom Transaction Context: https://remix-ide.readthedocs.io/en/latest/unittesting.html#customization #sender: account-1 #value: 100"
				},
				"checkaddContractorSuccess()": {
					"notice": "This will cause error if addContractor modifier onlyByDeveloper has msg.sender == Developer, modify to tx.origin == Developer This is to test if addContractor function can add another contractor #sender: account-0"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/newBuilding_test.sol": "testSuite"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
				"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
			]
		},
		"contracts/newBuilding.sol": {
			"keccak256": "0x109a625e743c557d4e46986240714fda602e59e3b348bb2f20a5ad997b69875f",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://3aac9c9afccc0bc011f717578ccb5a81d59465c9c93fa687664a8cabec598a1e",
				"dweb:/ipfs/QmVNQG94bVy8E32bvnxHqvMduTND7FnyHwfD86kXeJhsgV"
			]
		},
		"https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol": {
			"keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
				"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0x198a94b8e0342a81c31fda8ba387964155802ef81807e01e83e2320682dce327",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://db7d9939731e6fe2030d53b80f57ce2c1f8044209c1c67e634e81160227d3019",
				"dweb:/ipfs/QmRLYhZ2Y6bfh83QSD2hCnhVFejevzh77zUTohCCC8yCtu"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/newBuilding_test.sol": {
			"keccak256": "0x3513a110e6edea136254eb827dc721e8ec0ed9796cad1bdc48d11a602f432fff",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://c3b33a35b7cf0a2b99d346e4d2660d77ac405933f135c52c3e4feb7e3ab0bac2",
				"dweb:/ipfs/QmcUd22cVXzW1mZqGysy9gA58WFMb6NyXffpLmMiUkarrU"
			]
		}
	},
	"version": 1
}